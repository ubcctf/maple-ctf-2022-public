from pwn import remote
from utils import *
from spiral import Spiral
import random

re = True
host = "spiral.ctf.maplebacon.org" if re else "localhost"
print(host)
r = remote("spiral.ctf.maplebacon.org", 1337)

def query2(pt):
    print(pt)
    r.sendline(b"2")
    r.sendline(pt.hex())
    res = r.recvuntil(b">>> ", drop=True)
    return res

def query1():
    # print(pt)
    r.sendline(b"1")
    res = r.recvuntil(b"\n>>> ", drop=True)
    return res


r.recvuntil(b">>> ")
enc_flag = bytes.fromhex(query1().decode())
print(enc_flag)

key = []
for pos in range(16):
    print(pos)
    possible = set([i for i in range(255)])

    while len(possible) > 1:
        plaintexts = []
        ciphertexts = []

        pt = [i for i in range(16)]
        random.shuffle(pt)

        big_pt = b''
        for i in range(255):
            pt[pos] = i
            big_pt += bytes(pt)


        big_ct = bytes.fromhex(query2(big_pt).decode())
        print(big_ct, 16)
        print(len(big_ct))

        for i in range(0, len(big_ct), 16):
            plaintexts.append(big_pt[i:i+16])
            ciphertexts.append(big_ct[i:i+16])


        correct = set()
        for keyGuess in range(255):
            total = 0
            for pt, ct in zip(plaintexts, ciphertexts):
                byte = (ct[pos] - keyGuess) % 255
                byte = INV_SBOX[byte]

                total += byte

            if total % 255 == 0:
                correct.add(keyGuess)


        possible = possible.intersection(correct)
        print(possible)

    assert len(possible) == 1
    key.append(possible.pop())

print(bytes(key))
s = Spiral(key, rounds=4)
dec = s.decrypt(enc_flag)

print(dec)
