from pwn import *
from utils import *
from spiral import Spiral


re = False
host = "spiral-baby.ctf.maplebacon.org" if re else "localhost"
print(host)
r = remote(host, 1337)

def query2(pt):
    r.sendline(b"2")
    r.sendline(pt.hex())
    res = r.recvuntil(b">>> ", drop=True)
    
    return bytes.fromhex(res.decode())

def query1():
    # print(pt)
    r.sendline(b"1")
    res = r.recvuntil(b"\n>>> ", drop=True)
    return bytes.fromhex(res.decode())


r.recvuntil(b">>> ")
enc_flag = query1()
print(enc_flag)

initial = [i for i in range(16)]
rotated = list(matrix2bytes(spiralLeft(bytes2matrix(initial))))

key = []
for pos in range(16):
    plaintexts = []
    ciphertexts = []

    pt = [i for i in range(16)]
    random.shuffle(pt)
    big_pt = b''
    for i in range(255):
        pt[pos] = i
        big_pt += bytes(pt)

    big_ct = query2(big_pt)

    print(big_pt[:6])
    print(big_ct[:6])
    for i in range(0, len(big_ct), 16):
        plaintexts.append(big_pt[i:i+16])
        ciphertexts.append(big_ct[i:i+16])

    for k in range(255):
        k2 = []
        for i in range(255):
            after_sbox = SBOX[(plaintexts[i][pos] + k) % 255]
            k2.append((ciphertexts[i][rotated[pos]]-after_sbox) % 255)

        if all(k2[0] == k2[i] for i in range(len(k2))):
            key.append(k)
            break

    print(key)

print(bytes(key))
s = Spiral(key, rounds=1)
dec = s.decrypt(enc_flag)
print(dec)